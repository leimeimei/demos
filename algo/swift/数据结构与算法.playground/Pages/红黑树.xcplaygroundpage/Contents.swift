

import Foundation


///////////////////////////////////////////////
//  平衡二叉查找树：AVL树
//  严格定义：二叉树中任意一个节点的左右子树的高度相差不能大于1
//
//  平衡二叉查找树中“平衡”的意思，就是让整棵树左右看起来比较相对，
//  比较“平衡”,不要出现左子树很高，右子树很矮的情况，这样整棵树的
//  高度相对来说低一些，相应的插入，删除，查找的操作效率高一些
//
//
//  红黑树：R-B Tree
//  不是一种严格的平衡二叉查找树！
//  定义：
//  1- 根节点是黑色的
//  2- 每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据
//  3- 任何相邻的节点都不能同时为红色，即红色节点是被黑色节点隔开的
//  4- 每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点
//
//
//
//  AVL树是一种高度平衡的二叉树，查找效率高，但是为了维护高度的平衡，每次插入删除都要调整，比较耗时
//  R-B Tree只是做了近似平衡，并不是严格平衡，所以在维护成本上比AVL低
//  所以R-B Tree的插入，删除，查找各种操作性能比较稳定
//  红黑树的高度近似log2n,所以插入，删除，查找各种操作的时间复杂度都是O(logn)
///////////////////////////////////////////////
